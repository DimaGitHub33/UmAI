cat("\nMatriu B\n"); print(matB)
cat("\nVector Winf\n"); print(Winf)
Winf2 <- as.matrix(numeric(length(Winf)*2))
for(i in 1:length(Winf)){
Winf2[i, 1] <- Winf[i]
Winf2[i+length(Winf), 1] <- Winf[i]
}
Winf2
(vectorC <- matB%*%Winf2)
vectorC
p.vector.list
b.vector.list
p.vector.list
#p.vector.list <- lapply(t, function(x) prop.table(table(x)))
#My change here
p.vector.list <- lapply(t, function(x) sort(prop.table(table(x))))
b.vector.list <- vector('list', length(p.vector.list))
for(j in 1:length(p.vector.list)){
b.vector.list[[j]][1] <- -p.vector.list[[j]][2]
b.vector.list[[j]][2] <- p.vector.list[[j]][1]
}
names(b.vector.list) <- names(p.vector.list)
b.vector.list
t
p.vector.list <- lapply(t, function(x) sort(prop.table(table(x))))
b.vector.list <- vector('list', length(p.vector.list))
p.vector.list
b.vector.list
for(j in 1:length(p.vector.list)){
b.vector.list[[j]][1] <- -p.vector.list[[j]][2]
b.vector.list[[j]][2] <- p.vector.list[[j]][1]
}
b.vector.list
p.vector.list
p.vector.list
j
p.vector.list[[j]]
p.vector.list[[j]][2]
p.vector.list[[j]][1]
b.vector.list
#p.vector.list <- lapply(t, function(x) prop.table(table(x)))
#My change here
p.vector.list <- lapply(t, function(x) sort(prop.table(table(x))))
b.vector.list <- vector('list', length(p.vector.list))
for(j in 1:length(p.vector.list)){
b.vector.list[[j]][1] <- -p.vector.list[[j]][2]
b.vector.list[[j]][2] <- p.vector.list[[j]][1]
}
names(b.vector.list) <- names(p.vector.list)
b.vector.list
#p.vector.list <- lapply(t, function(x) prop.table(table(x)))
#My change here
p.vector.list <- lapply(t, function(x) sort(prop.table(table(x))))
b.vector.list <- vector('list', length(p.vector.list))
b.vector.list
p.vector.list
#p.vector.list <- lapply(t, function(x) prop.table(table(x)))
#My change here
p.vector.list <- lapply(t, function(x) sort(prop.table(table(x))))
b.vector.list <- vector('list', length(p.vector.list))
for(j in 1:length(p.vector.list)){
b.vector.list[[j]][1] <- -p.vector.list[[j]][2]
b.vector.list[[j]][2] <- p.vector.list[[j]][1]
}
names(b.vector.list) <- names(p.vector.list)
b.vector.list
p.vector.list
b.vector.list
p.vector.list
#p.vector.list <- lapply(t, function(x) prop.table(table(x)))
#My change here
p.vector.list <- lapply(t, function(x) sort(prop.table(table(x))))
p.vector.list
j=1
p.vector.list[[j]][2]
p.vector.list
uj=4
j=4
p.vector.list[[j]]
for(j in 1:length(p.vector.list)){
b.vector.list[[j]][1] <- -p.vector.list[[j]][2]
b.vector.list[[j]][2] <- p.vector.list[[j]][1]
}
names(b.vector.list) <- names(p.vector.list)
b.vector.list
matB <- diag(nrow=ncol(t)*2, ncol=ncol(t)*2)
matB
auxcol <- b.vector.list[[1]]
auxcol
cont <- 1
for(j in 1:length(auxcol)){
for(i in 1:length(b.vector.list)){
matB[cont,cont] <- b.vector.list[[i]][j]
cont <- cont +1
}
}
matB
auxcol
b.vector.list
length(b.vector.list)
matB
matB <- diag(nrow=ncol(t)*2, ncol=ncol(t)*2)
matB
matB <- diag(nrow=ncol(t)*2, ncol=ncol(t)*2)
matB
matB <- diag(nrow=ncol(t)*2, ncol=ncol(t)*2)
auxcol <- b.vector.list[[1]]
cont <- 1
for(j in 1:length(auxcol)){
for(i in 1:length(b.vector.list)){
matB[cont,cont] <- b.vector.list[[i]][j]
cont <- cont +1
}
}
matB
matB <- diag(nrow=ncol(t)*2, ncol=ncol(t)*2)
auxcol <- b.vector.list[[1]]
cont <- 1
for(j in 1:length(auxcol)){
for(i in 1:length(b.vector.list)){
matB[cont,cont] <- b.vector.list[[i]][j]
cont <- cont +1
}
}
matB
ncol(t)
t
cat("\nMatriu B\n"); print(matB)
cat("\nVector Winf\n"); print(Winf)
Winf2 <- as.matrix(numeric(length(Winf)*2))
Winf2
for(i in 1:length(Winf)){
Winf2[i, 1] <- Winf[i]
Winf2[i+length(Winf), 1] <- Winf[i]
}
Winf2
Winf2
(vectorC <- matB%*%Winf2)
A <- rep(c("Si", "No"), c(2,3))
B <- rep(c("Si", "No", "Si"), c(1,1,3))
C <- rep(c("S�","No", "S�", "No"), c(1,1,2,1))
D <- rep(c("S�", "No", "S�"), c(2, 1, 2))
(x <- data.frame(A, B, C, D))
ridit.calc(x)
(F)
(Winf <- iteracions(x))
(Compr_PCA <- CompPrinc(x))
vectC <- matBvectC(x)
######################################################################
###################### Principal Components ##########################
######################################################################
### We check the interations with Principal Components
#ridit.calc(t)
CompPrinc <- function(t){
PCA <- princomp(F)
load <- as.vector(PCA$loadings[,1])
return(load)
}
##########################################################
# We do not do this by now
PCA <- princomp(F)
load <- as.vector(PCA$loadings[,1])
scores <- data.frame(as.matrix(F)%*%load)
row.names(scores) <- row.names(F)
colnames(scores) <- 'Score'
assign('ridit.finalscore', cbind(F,scores), envir=globalenv())
assign('originaldata.finalscore', cbind(t,scores), envir=globalenv())
##########################################################
######################################################################
######################## Matrix B, Vector C ##########################
######################################################################
matBvectC <- function(t){
#p.vector.list <- lapply(t, function(x) prop.table(table(x)))
#My change here
p.vector.list <- lapply(t, function(x) sort(prop.table(table(x))))
b.vector.list <- vector('list', length(p.vector.list))
for(j in 1:length(p.vector.list)){
b.vector.list[[j]][1] <- -p.vector.list[[j]][2]
b.vector.list[[j]][2] <- p.vector.list[[j]][1]
}
names(b.vector.list) <- names(p.vector.list)
matB <- diag(nrow=ncol(t)*2, ncol=ncol(t)*2)
auxcol <- b.vector.list[[1]]
cont <- 1
for(j in 1:length(auxcol)){
for(i in 1:length(b.vector.list)){
matB[cont,cont] <- b.vector.list[[i]][j]
cont <- cont +1
}
}
matB
Winf
cat("\nMatriu B\n"); print(matB)
cat("\nVector Winf\n"); print(Winf)
Winf2 <- as.matrix(numeric(length(Winf)*2))
for(i in 1:length(Winf)){
Winf2[i, 1] <- Winf[i]
Winf2[i+length(Winf), 1] <- Winf[i]
}
######################################################
#   multiplying matrix B times Winf we obtain vector C
(vectorC <- matB%*%Winf2)
#cat("\nVector C\n"); print(vectorC)
return (vectorC)
}
A <- rep(c("Si", "No"), c(2,3))
B <- rep(c("Si", "No", "Si"), c(1,1,3))
C <- rep(c("S�","No", "S�", "No"), c(1,1,2,1))
D <- rep(c("S�", "No", "S�"), c(2, 1, 2))
(x <- data.frame(A, B, C, D))
ridit.calc(x)
(F)
(Winf <- iteracions(x))
(Compr_PCA <- CompPrinc(x))
vectC <- matBvectC(x)
cat("\nVector C\n"); print(vectC)
(F)
Winf
Compr_PCA
vectC
vectC <- matBvectC(x)
vectC
b.vector.list
ridit.calc <- function(t) {
#p.vector.list <- lapply(t, function(x) prop.table(table(x)))
#names(p.vector.list) <- names(t)
##My addjustment
p.vector.list <- lapply(t, function(x) sort(prop.table(table(x))))
names(p.vector.list) <- names(t)
s.vector.list <- vector('list', length(p.vector.list))
for (j in 1:length(p.vector.list)){
x <- p.vector.list[[j]]
s.vector.list[[j]] <- numeric(length(x))
s.vector.list[[j]][1] <- -sum(x[2:length(x)])
for (i in 2:length(x)){
s.vector.list[[j]][i] <- sum(x[1:(i-1)]) - (1-sum(x[1:i]))
}
names(s.vector.list[[j]]) <- names(p.vector.list[[j]])
}
names(s.vector.list) <- names(t)
t2 <- data.frame(matrix(nr=nrow(t), nc=ncol(t)))
names(t2) <- names(t)
for (i in 1:ncol(t)){
for (j in 1:nrow(t)){
t2[j, i] <- s.vector.list[[i]][names(s.vector.list[[i]]) == t[j, i]]
assign('F',t2, envir=globalenv())
}
}
}
######################################################################
########################## Example 1 #################################
######################################################################
A <- rep(c("Si", "No"), c(2,3))
B <- rep(c("Si", "No", "Si"), c(1,1,3))
C <- rep(c("S�","No", "S�", "No"), c(1,1,2,1))
D <- rep(c("S�", "No", "S�"), c(2, 1, 2))
(x <- data.frame(A, B, C, D))
ridit.calc(x)
(F)
(Winf <- iteracions(x))
(Compr_PCA <- CompPrinc(x))
vectC <- matBvectC(x)
cat("\nVector C\n"); print(vectC)
######################################################################
########################## Example 2 #################################
######################################################################
A1 <- c("Si","Be","No","Be","Si","Si","Si")
B1 <- c("Si","No","No","Be","Si","No","No")
(x1 <- data.frame(A1,B1))
x1
# A1 B1
# 1 Si Si
# 2 Be No
# 3 No No
# 4 Be Be
# 5 Si Si
# 6 Si No
# 7 Si No
# p.vector.list
# $A1
# x
# Be        No        Si
# 0.2857143 0.1428571 0.5714286
#
# $B1
# x
# Be        No        Si
# 0.1428571 0.5714286 0.2857143
#F
# $A1
# Be         No         Si
# -0.7142857 -0.2857143  0.4285714
#
# $B1
# Be         No         Si
# -0.8571429 -0.1428571  0.7142857
## insert F to the data
# A1         B1
# 2 -0.7142857 -0.1428571
# 3 -0.2857143 -0.1428571
# 4 -0.7142857 -0.8571429
# 5  0.4285714  0.7142857
# 6  0.4285714 -0.1428571
# 7  0.4285714 -0.1428571
ridit.calc(x1)
(F)
(Winf <- iteracions(x1))
(Compr_PCA <- CompPrinc(x1))
vectC <- matBvectC(x1)
cat("\nVector C\n"); print(vectC)
######################################################################
####################### Function iteracions ##########################
######################################################################
iteracions <- function(t){
#transposta de F
Ft <- t(F)
#creem el vector W0
W0 <- as.matrix(numeric(length(F)))
for(j in 1:length(F)){
W0[j] <- 1
}
S0 <- data.frame(as.matrix(F)%*%W0)
W1a <- as.matrix(Ft)%*%as.matrix(S0)
W1b <- norm(W1a, type="2")
W1 <- W1a/W1b
S1 <- data.frame(as.matrix(F)%*%W1)
#condp1=1
iter <- 1
while (iter <= 1000){
iter <- iter+1
Wa <- as.matrix(Ft)%*%as.matrix(S1)
Wb <- norm(Wa, type="2")
W2 <- Wa/Wb
S2 <- data.frame(as.matrix(F)%*%W2)
W0 <- W1
W1 <- W2
S1 <- S2
#print(W0)
#print(W1)
#Sys.sleep(1)
#if (W0[1,1] == W1[1,1] && W0[2,1] == W1[2,1])  {
#  condp1 =0
#} else {
#  condp1=condp1+1
#}
}
cat("\nIteracions= ", iter, "\n")
return(W2)
}
A <- rep(c("Si", "No"), c(2,3))
B <- rep(c("Si", "No", "Si"), c(1,1,3))
C <- rep(c("S�","No", "S�", "No"), c(1,1,2,1))
D <- rep(c("S�", "No", "S�"), c(2, 1, 2))
(x <- data.frame(A, B, C, D))
# A1 B1
# 1 Si Si
# 2 Be No
# 3 No No
# 4 Be Be
# 5 Si Si
# 6 Si No
# 7 Si No
# p.vector.list
# $A1
# x
# Be        No        Si
# 0.2857143 0.1428571 0.5714286
#
# $B1
# x
# Be        No        Si
# 0.1428571 0.5714286 0.2857143
#F
# $A1
# Be         No         Si
# -0.7142857 -0.2857143  0.4285714
#
# $B1
# Be         No         Si
# -0.8571429 -0.1428571  0.7142857
## insert F to the data
# A1         B1
# 2 -0.7142857 -0.1428571
# 3 -0.2857143 -0.1428571
# 4 -0.7142857 -0.8571429
# 5  0.4285714  0.7142857
# 6  0.4285714 -0.1428571
# 7  0.4285714 -0.1428571
ridit.calc(x)
(F)
(Winf <- iteracions(x))
(Compr_PCA <- CompPrinc(x1))
vectC <- matBvectC(x1)
######################################################################
###################### Principal Components ##########################
######################################################################
### We check the interations with Principal Components
#ridit.calc(t)
CompPrinc <- function(t){
PCA <- princomp(F)
load <- as.vector(PCA$loadings[,1])
return(load)
}
##########################################################
# We do not do this by now
PCA <- princomp(F)
load <- as.vector(PCA$loadings[,1])
scores <- data.frame(as.matrix(F)%*%load)
row.names(scores) <- row.names(F)
colnames(scores) <- 'Score'
assign('ridit.finalscore', cbind(F,scores), envir=globalenv())
assign('originaldata.finalscore', cbind(t,scores), envir=globalenv())
##########################################################
######################################################################
######################## Matrix B, Vector C ##########################
######################################################################
matBvectC <- function(t){
#p.vector.list <- lapply(t, function(x) prop.table(table(x)))
#My change here
p.vector.list <- lapply(t, function(x) sort(prop.table(table(x))))
b.vector.list <- vector('list', length(p.vector.list))
for(j in 1:length(p.vector.list)){
b.vector.list[[j]][1] <- -p.vector.list[[j]][2]
b.vector.list[[j]][2] <- p.vector.list[[j]][1]
}
names(b.vector.list) <- names(p.vector.list)
matB <- diag(nrow=ncol(t)*2, ncol=ncol(t)*2)
auxcol <- b.vector.list[[1]]
cont <- 1
for(j in 1:length(auxcol)){
for(i in 1:length(b.vector.list)){
matB[cont,cont] <- b.vector.list[[i]][j]
cont <- cont +1
}
}
matB
Winf
cat("\nMatriu B\n"); print(matB)
cat("\nVector Winf\n"); print(Winf)
Winf2 <- as.matrix(numeric(length(Winf)*2))
for(i in 1:length(Winf)){
Winf2[i, 1] <- Winf[i]
Winf2[i+length(Winf), 1] <- Winf[i]
}
######################################################
#   multiplying matrix B times Winf we obtain vector C
(vectorC <- matB%*%Winf2)
#cat("\nVector C\n"); print(vectorC)
return (vectorC)
}
A <- rep(c("Si", "No"), c(2,3))
B <- rep(c("Si", "No", "Si"), c(1,1,3))
C <- rep(c("S�","No", "S�", "No"), c(1,1,2,1))
D <- rep(c("S�", "No", "S�"), c(2, 1, 2))
(x <- data.frame(A, B, C, D))
ridit.calc(x)
(F)
(Winf <- iteracions(x))
(Compr_PCA <- CompPrinc(x))
vectC <- matBvectC(x)
cat("\nVector C\n"); print(vectC)
(F)
ridit.calc(x)
Winf
Compr_PCA
getwd()
setwd("UmAI/")
Fullcov = read.csv("x3.csv",header=TRUE)
ridit.calc(Fullcov)
(F)
Fullcov
(Winf <- iteracions(Fullcov))
(Compr_PCA <- CompPrinc(Fullcov))
vectC <- matBvectC(Fullcov)
cat("\nVector C\n"); print(vectC)
yhat=(as.matrix(F))%*%as.matrix(Winf)
yobs = read.csv("Fullcoverage.csv",header=TRUE)
Winf
F
yhat
yobs
Fullcov
(F)
A <- rep(c("Si", "No"), c(2,3))
B <- rep(c("Si", "No", "Si"), c(1,1,3))
C <- rep(c("S�","No", "S�", "No"), c(1,1,2,1))
D <- rep(c("S�", "No", "S�"), c(2, 1, 2))
(x <- data.frame(A, B, C, D))
ridit.calc(x)
(F)
(Winf <- iteracions(x))
ridit.calc(x)
(F)
(Winf <- iteracions(x))
(Compr_PCA <- CompPrinc(x))
vectC <- matBvectC(x)
print(vectC)
A <- rep(c("Si", "No"), c(2,3))
B <- rep(c("Si", "No", "Si"), c(1,1,3))
C <- rep(c("S�","No", "S�", "No"), c(1,1,2,1))
D <- rep(c("S�", "No", "S�"), c(2, 1, 2))
(x <- data.frame(A, B, C, D))
ridit.calc(x)
(F)
(Winf <- iteracions(x))
(Compr_PCA <- CompPrinc(x))
vectC <- matBvectC(x)
cat("\nVector C\n"); print(vectC)
Winf
Compr_PCA
yhat=(as.matrix(F))%*%as.matrix(Winf)
yhat
